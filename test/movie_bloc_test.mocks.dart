// Mocks generated by Mockito 5.4.4 from annotations
// in cinematix/test/movie_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cinematix/data/_data.dart' as _i2;
import 'package:cinematix/domain/_domain.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieRepository_0 extends _i1.SmartFake
    implements _i2.MovieRepository {
  _FakeMovieRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieDetailEntity_1 extends _i1.SmartFake
    implements _i3.MovieDetailEntity {
  _FakeMovieDetailEntity_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieUseCase extends _i1.Mock implements _i3.MovieUseCase {
  MockMovieUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeMovieRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.MovieRepository);

  @override
  _i4.Future<List<_i3.MovieEntity>> getPlayingNowMovies({
    int? page = 1,
    String? language,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlayingNowMovies,
          [],
          {
            #page: page,
            #language: language,
          },
        ),
        returnValue:
            _i4.Future<List<_i3.MovieEntity>>.value(<_i3.MovieEntity>[]),
      ) as _i4.Future<List<_i3.MovieEntity>>);

  @override
  _i4.Future<_i3.MovieDetailEntity> getMovieDetailById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieDetailById,
          [id],
        ),
        returnValue:
            _i4.Future<_i3.MovieDetailEntity>.value(_FakeMovieDetailEntity_1(
          this,
          Invocation.method(
            #getMovieDetailById,
            [id],
          ),
        )),
      ) as _i4.Future<_i3.MovieDetailEntity>);
}
